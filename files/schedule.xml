<?xml version="1.0" encoding="UTF-8"?>
<schedule>
<version>2.0</version>

<conference>
<acronym>Pass the SALT</acronym>
<title>Pass the SALT 2018</title>
<start>2018-07-02</start>
<end>2018-07-04</end>
<days>3</days>
<timeslot_duration>00:10</timeslot_duration>
</conference>

<day date="2018-07-02" end="2018-07-02T17:50:00+02:00" index="1" start="2018-07-02T14:00:00+02:00">

<room name="Amphi MIGEON">

<event guid="1" id="1">
<date>2018-07-02T14:00:00+02:00</date>
<start>14:00</start>
<duration>00:15</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>**Launching talk**</title>
<subtitle/>
<track>Misc</track>
<type/>
<language/>
<abstract>General informations about the conference
</abstract>
<description/>
<logo>https://conf.qtcon.org/assets/qtcon.jpg</logo>
<persons>
	<person>The organization team</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="2" id="2">
<date>2018-07-02T14:15:00+02:00</date>
<start>14:15</start>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<slug>1</slug>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Debian security team: behind the curtains</title>
<subtitle/>
<track>Linux Distribution Security</track>
<type/>
<language/>
<abstract>This talk will presents the Debian security team: the people, the roles, the workflows. It will also detail the handling of vulnerabilities, both public and private/embargoed ones. 
</abstract>
<description>
</description>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
<person>Yves-Alexis Perez - Debian developer, member of the security team. He works at ANSSI as head of the Hardware and Software architecture lab.</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="3" id="3">
<date>2018-07-02T14:15:00+02:00</date>
<start>14:50</start>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>r2frida - Better Together</title>
<subtitle/>
<track>Reverse and low level</track>
<type/>
<language/>
<abstract>
In this talk we will present Frida and Radare as separate and combined tools. Have you ever wanted to enhance your static analysis with live telemetry from a running instance of the software that you’re analyzing? Did you ever want a more visual interface for Frida to type commands instead of snippets of JavaScript? If any of the above, or none of it, then this talk is for you. 
</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
<person>Ole André V. Ravnås - Frida developer</person>
‎<person>Sergi Alvarez aka pancake - r2 developer</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="4" id="4">
<date>2018-07-02T15:25:00+02:00</date>
<start>15:25</start>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Static instrumentation based on executable file formats</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>Many instrumentation techniques are based on modifying code or system environment of the target. It can be suitable for scenarios but it could not work under certain circumstance (integrity checking, non-rooted environment…) In this talk we propose similar techniques by only modifying the executable format. This enables to be architecture independent, injection and hooking does not require privileged environment. </abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
<person>Romain Thomas (LIEF developer, Quarkslab)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="5" id="5">
<date>2018-07-02T16:00:00+02:00</date>
<start>16:00</start>
<duration>00:20</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>**Afternoon Break**</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>
</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="6" id="6">
<date>2018-07-02T16:20:00+02:00</date>
<start>16:20</start>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Machine-Code Analysis With Open-Source Decompiler RetDec</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>When we need to deeply analyze a binary application (e.g. for malware dissection, vulnerability research, code optimization), static code analysis is what we use most of the time. However, static analysis of machine-code is usually not an easy task. It is actually a tough one in case of malware analysis. Luckily, existing machine-code decompilers help with this task significantly. On the other hand, the most well-known decompilers are either proprietary, cannot be easily modified for a given task, or both. In this talk, we would like to depict our machine-code decompiler called RetDec (Retargetable Decompiler) that we are developing in Avast since 2011 and which we have open-sourced a few months ago under the MIT license. Its primary goal is, of course, decompilation of binary (malicious) applications, but its components can also be used for other tasks, such as disassembly, extraction of basic blocks, or initial assessment of malware samples.</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>Jakub Kroustek  (RetDec creator, Avast software)</person>
    <person>Peter Matula (RetDec developer, Avast software)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="7" id="7">
<date>2018-07-02T16:55:00+02:00</date>
<start>16:55</start>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Are there Spectre-based malware on your Android smartphone?</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>The Spectre attack has had massive coverage, and I assume (nearly) everybody at Pass The Salt will have heard of it. This talk is not yet another explanation of Spectre, nor generic advice of what to do. Rather, this talk is oriented on implementation issues and answering 2 simple questions (which haven’t been addressed yet to my knowledge): 1. Is your Android smartphone vulnerable to Spectre or not? ARM has published a security advisory with a list of vulnerable processors. We’ll see that the answer isn’t as simple as checking the list. . . 2. How can we detect malware using Spectre, and are there any? The media have been quiet about that. Working for an AV company, that’s perhaps something I can contribute to. </abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>Axelle Apvrille (Senior researcher, Fortinet)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="8" id="8">
<date>2018-07-02T17:30:00+02:00</date>
<start>17:30</start>
<duration>00:20</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>A graphical user interface for radare2: Cutter</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>Radare2 is a free and open-source reverse engineering framework, which is becoming more and more popular. One of its main criticisms is that it is only usable within a terminal (CLI), and that the commands are not intuitive, making the learning curve steep. The Cutter project was created to provide an easy-to-use, but still powerful, interface to radare2 for new users. This is done with a native graphical user interface made in Qt and C++. The goal of the talk is to present radare2 history, along with the common complaints from users, and how we try to overcome those with Cutter. I’ll be presenting the features that are already implemented, the way we allow our users to script the interface, and obviously the missing features that we will implement in a near future. While Cutter is still under heavy development, it’s becoming more and more user-friendly and easy to use. It is becoming a great alternative to other reverse engineering tools. </abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>Antide Petit (Cutter developer)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

</room>

<room name="B001 : D'Arsonval">

<event guid="10" id="10">
<date>2018-07-02T14:15:00+02:00</date>
<start>14:15</start>
<duration>02:30</duration>
<room>B001 : D'Arsonval</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>WORKSHOP: Introduction to Bro Network Security Monitor</title>
<subtitle/>
<track>Workshop</track>
<type/>
<language/>
<abstract>
Bro is an open-source Network Security Monitor (NSM) and analytics platform. Even though it has been around since the mid 90’s, its main user base was primarily universities, research labs and supercomputing centers. In the past few years however, more and more security professionals in the industry turned their attention to this powerful tool, as it runs on commodity hardware, thus providing a low-cost alternative to commercial solutions.

At its core, Bro inspects traffic and creates an extensive set of well-structured, tab-separated log files that record a network’s activity. Nonetheless, Bro is a lot more than just a traditional signature-based IDS. While it supports such standard functionality as well, Bro’s scripting language allows security analysts to perform arbitrary analysis tasks such as extracting files from sessions, detecting malware by interfacing with an external source, detecting brute-forcing, etc. It comes with a large set of pre-built standard libraries, just like Python.

During this two-hour workshop, we will learn about Bro’s capabilities and cover the following topics:

    Introduction to Bro
    Bro architecture
    Bro events and logs
    Bro signatures
    Bro scripting
    Bro and ELK

Requirements for the workshop:

    A laptop with at least 8 GB of RAM and more than 30 GB of free disk space
    VMWare Workstation or VMWare Player installed
</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
<person>Eva Szilagyi - CEO Alzette Information Security</person>
<person>David Szili - CTO Alzette Information Security</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

</room>

</day>

<day date="2018-07-03" end="2018-07-03T17:55:00+02:00" index="1" start="2018-07-03T09:00:00+02:00">

<room name="Amphi MIGEON">

<event guid="11" id="11">
<date>2018-07-03T09:00:00+02:00</date>
<start>09:00</start>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Traffic filtering at scale on Linux</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>BPF programs are widely known for packet filtering in libpcap (the underlying capture library used by tcpdump and wireshark). One can also use them for performance analysis (perf uses BPF programs), but also for security purposes (seccomp uses BPF as well). In this talk, we focus on networking and dive into BPF bytecode. First, we will have a look on the available toolchains and API. Then we will jump into actual BPF programs and figure how eBPF can be leveraged to perform traffic filtering using several mechanism amongst socket filtering API, iptables and tc. Finally, we will scratch the surface of XDP capabilities.</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>François Serman (OVH)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="12" id="12">
<date>2018-07-03T09:35:00+02:00</date>
<start>09:35</start>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Performance with a S like Security: the eBPF XDP case </title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>extended Berkeley Packet Filter (eBPF) and eXtreme Data Path (XDP) technologies are gaining in popularity in the tracing and performance community in Linux for eBPF and among the networking people for XDP. After an introduction to these technologies, this talk proposes to get a look to the usage of the eBPF and XDP technology in the domain of security. A special focus on Suricata that uses this technology to enhance its performance and by consequences the accuracy of its network analysis and detection.</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>Éric Leblond (Suricata core developer, Stamus Networks)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="13" id="13">
<date>2018-07-03T10:10:00+02:00</date>
<start>10:10</start>
<duration>00:20</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>**Morning Pause**</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>
</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="14" id="14">
<date>2018-07-03T10:30:00+02:00</date>
<start>10:30</start>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>KEYNOTE: a 10 years journey in Linux firewalling</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>Just come :) </abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>Pablo Neira Ayuso (Head of Netfilter core team)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="15" id="15">
<date>2018-07-03T11:05:00+02:00</date>
<start>11:05</start>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Full packet capture for the masses</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>When you are facing a security incident, your investigations will depend on the data that you can analyze. If logs are often the first source of evidence, sometimes, it could be interesting to have access to a full packet capture to “dive deeper” in the traffic generated from/to the compromised network or host. Full packet capture (FPC) is like your insurance, you implement it and you never know if you’ll have to use it… Until something weird happened! In my presentation, I’ll present a simple way to implement FPC for small organizations and based on open source solutions (Moloch, Docker) and how to interconnect them. This talk is an extension of my SANS ISC diary (The easy way to analyze huge amounts of PCAP data) with more practical details. </abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>Xavier Mertens (Security consultant, ISC SANS handler)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="16" id="16">
<date>2018-07-03T11:40:00+02:00</date>
<start>11:40</start>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Rumps Session</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>This is a session of lightning talks (between 3-5min).You will be able to register to give a lightning talk a few days before the event until Monday 2nd July evening.
Only one requirement: your talk has to be about Free Software and Security.</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>You!</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="17" id="17">
<date>2018-07-03T12:15:00+02:00</date>
<start>12:15</start>
<duration>02:00</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>**Mid Day Break**</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>
</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="18" id="18">
<date>2018-07-03T14:15:00+02:00</date>
<start>14:15</start>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Security and Self-Driving Computers</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>We have to admit to ourselves: we do not really like to turn on automatic updates. We do not like relinquishing control. Even if we do not really know what the announced update contains, we like to have one look at it before we hit the “update” button.
Right?
Often, still, we do not even have an automated update option available - like on our phones. And we are nagged every other month or so that an update is available, that we should install it and if we please can hit the “ok” button now to start it.
My mother usually calls me when her phone asks her to update. “Should I?” she asks. And I always say “Yes!” And she keeps on calling me.
Well, that’s what mothers do anyway. But you get the point.
This is technical nonsense. It’s all part of the Legal Blame Game: “Make sure, when things go wrong, we have an excuse.” But from a technical and security point of view, updates need to happen without user intervention, for everyone.
For our security infrastructure, we try to avoid this and jump from “no updates” to full automation. Because expired certificates are just too embarrassing for everyone.
Oh, and we can make it free at the same time - because automation.
[Insert the story of Let’s Encrypt (LE) that everyone knows…]
LE is interested to get broad support, so one of the most commonly used web server on the planet was a natural target. greenbytes proposed to MOSS (Mozilla’s Open Source Support) for a grant and got it going in 2017.
This talk gives a summary of what is nowadays available in Apache, what is still on the road ahead, and where one may contribute (Hint: ACME fuzzing anyone?)!
</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>Stefan Eissing (Mod_md developer (Let’s Encrypt Apache module))</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="19" id="19">
<date>2018-07-03T14:50:00+02:00</date>
<start>14:50</start>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Snuffleupagus: killing bug classes and virtual patching the rest</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>
</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>Julien Voisin, Thibault Koechlin, Simon Magnin-Feysot (Snuffleupagus developers, NBS Systems)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="20" id="20">
<date>2018-07-03T15:25:00+02:00</date>
<start>15:25</start>
<duration>00:20</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Preview of Vulture’s upcoming web filtering engine</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>We are the creators of the VultureProject, an Open Source HTTP reverse-proxy that ensures the security of web applications. Built on top of open-source technologies such as Apache, FreeBSD, HA-Proxy and MongoDB, Vulture’s basic features are: network firewall, TCP and HTTP proxy balancing, user authentication, web application firewall, TLS endpoint, content rewriting and many other cool things. Currently based on ModSecurity, ModDefender and custom algorithms (including machine learning), the VultureProject Team wants to push innovation even further by creating an all new, fully modular, standalone and open-source intelligent web application firewall engine. No longer based on rules, this engine will be able to understand, dissect and analyze with a lot of finesse every request and response sent; you will no longer need to spend hours of configuration, simply activate the filters you need and let our algorithms learn by themselves and protect your web applications. During the talk, we will focus on this new WAF (Web Application Firewall) engine, explaining why we need to rethink web applications security today, how we are conceiving this new solution, how we are building it and how we think it will solve some issues faced daily by our teams and by our community. </abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>Jérémie Jourdin and Hugo Soszynski (Vulture developers, aDvens)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="21" id="21">
<date>2018-07-03T15:45:00+02:00</date>
<start>15:45</start>
<duration>00:20</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>SecureDrop, for whistle-blowers</title>
<subtitle/>SecureDrop, for whistle-blowers
<track></track>
<type/>
<language/>
<abstract>This session will introduce SecureDrop, a Free Software whistleblowing platform which received the 2016 Free Software Award from the Free Software Foundation for Social Benefits.

We will describe how it addresses the critical need for a way for journalists and sources to communicate securely and anonymously. Many large news organizations including the Associated Press (AP), the Guardian, the Washington Post and the New York Times are all now running SecureDrop in their newsrooms to preserve an anonymous tip line in the presence of increasing surveillance powers by governments and corporations.

We will describe how SecureDrop works, how sources/journalists should use it, and how you can contribute to the project. 
</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>François Poulain (SecureDrop admin)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="22" id="22">
<date>2018-07-03T16:05:00+02:00</date>
<start>16:05</start>
<duration>00:20</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>**Afternoon Break**</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>
</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="23" id="23">
<date>2018-07-03T16:25:00+02:00</date>
<start>16:25</start>
<stop>17:00</stop>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Second factor authentication (2FA) in LemonLDAP::NG</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>In LemonLDAP::NG 2.0, the second factor authentication is now a built-in feature and allows to rely on FIDO Alliance, TOTP, Yubikey, or any third party device through script call. I will first present how authentication works in LL::NG and how the 2FA was integrated as core functionality.</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>Clément Oudot, Xavier Guimard (LemonLDAP::NG developers)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="24" id="24">
<date>2018-07-03T14:15:00+02:00</date>
<start>14:15</start>
<stop></stop>
<duration>02:30</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>No way JOSE! Lessons for authors and implementers of open standards</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>Protocol and data format specifications can be ambiguous, insecure or have other problems. Programmers and users bear the brunt of these issues. Using JOSE as a case study, I’ll discuss mistakes for standards authors to avoid, and demonstrate programming techniques for mitigating some kinds of problems.

JOSE (JSON Object Signing and Encryption) is a set of IETF standards for JSON-based cryptographic objects. You might know it as JWT or JWS. It is used in OpenID Connect, ACME, and other protocols. JOSE emerged a few years ago and has been causing headaches for the presenter ever since.

Using JOSE as a case study, this presentation looks at mistakes to avoid when specifying a data format or cryptographic protocol. We’ll also explore programming techniques for mitigating some kinds of problems in specifications. In particular, we will cover:

    the flawed rationale for the JOSE working group
    why JSON is a poor wire format for cryptographic objects
    cryptography issues in the JOSE specifications
    ambiguities and interoperability problems in the specifications
    common vulnerabilities in JOSE libraries
    how library authors can encourage or enforce safe use
    advice for standards authors or working groups

Each topic will culminate in one simple, actionable takeaway.

Programming principles and techniques will be demonstrated using Haskell and its jose library, which is maintained by the presenter. </abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>Fraser Tweedale (Software Engineer, Red Hat)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="25" id="25">
<date>2018-07-03T17:35:00+02:00</date>
<start>17:35</start>
<stop>17:55</stop>
<duration>00:20</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Too bad… your password has just been stolen! Did you consider using 2FA?</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>Authentication is a major component of security, but is often implemented as a password-based solution even though stronger and more secure alternatives exist. This talk will explain the risks associated with password-based authentication, describe the advantages of two-factor authentication, and show how open source software such as FreeIPA can help deploy an infrastructure for Smart Card authentication with X509 certificates or One-Time Password authentication. </abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>Florence Blanc-Renaud (Senior Software Engineer FreeIPA, Red Hat)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

</room>

<room name="B001 : D'Arsonval">

<event guid="26" id="26">
<date>2018-07-02T09:00:00+02:00</date>
<start>09:00</start>
<stop>12:00</stop>
<duration>03:00</duration>
<room>B001 : D'Arsonval</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>WORKSHOP: AIL-Framework: A modular framework to analyse potential information leaks</title>
<subtitle/>
<track>Workshop</track>
<type/>
<language/>
<abstract>
AIL is an open source modular framework to analyse potential information leaks from unstructured data sources like pastes from Pastebin or similar services or unstructured data streams. The primary aim of the framework is to gather credentials, emails, creditcard numbers and so on in order to help security experts to detect leaks and then, react accordingly. Moreover, AIL framework is flexible and can be extended fairly easily to support other functionalities to mine sensitive information.

The AIL workshop will show how the framework functions, how to use it, how you can feed the software with your own data and finally how you can contributes to help us improve AIL with new features.

Requirements for the workshop:

a laptop with 8GB of RAM, 2 cores and VirtualBox installed.

</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
<person>Sami Mokaddem (CIRCL)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="27" id="27">
<date>2018-07-02T14:15:00+02:00</date>
<start>14:15</start>
<stop>16:10</stop>
<duration>02:00</duration>
<room>B001 : D'Arsonval</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>WORKSHOP: URL Analysis with Faup</title>
<subtitle/>
<track>Workshop</track>
<type/>
<language/>
<abstract>
Whenever one want to run an investigation over the URLs crawled from her/his organization website, it can get tricky: millions of URLs to follow, hard to keep control on what is going on. This presentation will focus on the open source tool called FAUP for Finally An URL Parser and show how it has been used with large organizations to quickly understand new threats. Faup helps with the snapshot mechanism to classify URLs to be used for Machine Learning, it gives an automatic way of creating a white list at scale to then only spend the time focusing on the URLs you are not aware of. Faup can be used similarly to Dshield and gather intelligence over URLs and will show how collaboration over something as simple as an URL in conjunction with MISP can enhance the discovery of unknown threats. 

</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
<person>Sébastien Tricaud (Open source and security pro and enthusiast, Splunk)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>


</room>


</day>

</schedule>