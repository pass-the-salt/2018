<?xml version="1.0" encoding="UTF-8"?>
<schedule>
<version>2.0</version>

<conference>
<acronym>Pass the SALT</acronym>
<title>Pass the SALT 2018</title>
<start>2018-07-02</start>
<end>2018-07-04</end>
<days>3</days>
<timeslot_duration>00:10</timeslot_duration>
</conference>

<day date="2018-07-02" end="2018-07-02T17:50:00+02:00" index="1" start="2018-07-02T14:00:00+02:00">

<room name="Amphi MIGEON">

<event guid="1" id="1">
<date>2018-07-02T14:00:00+02:00</date>
<start>14:00</start>
<duration>00:15</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Launching talk</title>
<subtitle/>
<track>Misc</track>
<type/>
<language/>
<abstract>General informations about the conference
</abstract>
<description/>
<logo>https://conf.qtcon.org/assets/qtcon.jpg</logo>
<persons>
	<person>The organization team</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="2" id="2">
<date>2018-07-02T14:15:00+02:00</date>
<start>14:15</start>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<slug>1</slug>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Debian security team: behind the curtains</title>
<subtitle/>
<track>Linux Distribution Security</track>
<type/>
<language/>
<abstract>This talk will presents the Debian security team: the people, the roles, the workflows. It will also detail the handling of vulnerabilities, both public and private/embargoed ones. 
</abstract>
<description>
</description>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
<person>Yves-Alexis Perez - Debian developer, member of the security team. He works at ANSSI as head of the Hardware and Software architecture lab.</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="3" id="3">
<date>2018-07-02T14:15:00+02:00</date>
<start>14:50</start>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>r2frida - Better Together</title>
<subtitle/>
<track>Reverse and low level</track>
<type/>
<language/>
<abstract>
In this talk we will present Frida and Radare as separate and combined tools. Have you ever wanted to enhance your static analysis with live telemetry from a running instance of the software that you’re analyzing? Did you ever want a more visual interface for Frida to type commands instead of snippets of JavaScript? If any of the above, or none of it, then this talk is for you. 
</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
<person>Ole André V. Ravnås - Frida developer</person>
‎<person>Sergi Alvarez aka pancake - r2 developer</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="4" id="4">
<date>2018-07-02T15:25:00+02:00</date>
<start>15:25</start>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Static instrumentation based on executable file formats</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>Many instrumentation techniques are based on modifying code or system environment of the target. It can be suitable for scenarios but it could not work under certain circumstance (integrity checking, non-rooted environment…) In this talk we propose similar techniques by only modifying the executable format. This enables to be architecture independent, injection and hooking does not require privileged environment. </abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
<person>Romain Thomas (LIEF developer, Quarkslab)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="5" id="5">
<date>2018-07-02T16:00:00+02:00</date>
<start>16:00</start>
<duration>00:20</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Afternoon Break</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>
</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="6" id="6">
<date>2018-07-02T16:20:00+02:00</date>
<start>16:20</start>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Machine-Code Analysis With Open-Source Decompiler RetDec</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>When we need to deeply analyze a binary application (e.g. for malware dissection, vulnerability research, code optimization), static code analysis is what we use most of the time. However, static analysis of machine-code is usually not an easy task. It is actually a tough one in case of malware analysis. Luckily, existing machine-code decompilers help with this task significantly. On the other hand, the most well-known decompilers are either proprietary, cannot be easily modified for a given task, or both. In this talk, we would like to depict our machine-code decompiler called RetDec (Retargetable Decompiler) that we are developing in Avast since 2011 and which we have open-sourced a few months ago under the MIT license. Its primary goal is, of course, decompilation of binary (malicious) applications, but its components can also be used for other tasks, such as disassembly, extraction of basic blocks, or initial assessment of malware samples.</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>Jakub Kroustek  (RetDec creator, Avast software)</person>
    <person>Peter Matula (RetDec developer, Avast software)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="7" id="7">
<date>2018-07-02T16:55:00+02:00</date>
<start>16:55</start>
<duration>00:35</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>Are there Spectre-based malware on your Android smartphone?</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>The Spectre attack has had massive coverage, and I assume (nearly) everybody at Pass The Salt will have heard of it. This talk is not yet another explanation of Spectre, nor generic advice of what to do. Rather, this talk is oriented on implementation issues and answering 2 simple questions (which haven’t been addressed yet to my knowledge): 1. Is your Android smartphone vulnerable to Spectre or not? ARM has published a security advisory with a list of vulnerable processors. We’ll see that the answer isn’t as simple as checking the list. . . 2. How can we detect malware using Spectre, and are there any? The media have been quiet about that. Working for an AV company, that’s perhaps something I can contribute to. </abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>Axelle Apvrille (Senior researcher, Fortinet)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

<event guid="8" id="8">
<date>2018-07-02T17:30:00+02:00</date>
<start>17:30</start>
<duration>00:20</duration>
<room>Amphi MIGEON</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>A graphical user interface for radare2: Cutter</title>
<subtitle/>
<track></track>
<type/>
<language/>
<abstract>Radare2 is a free and open-source reverse engineering framework, which is becoming more and more popular. One of its main criticisms is that it is only usable within a terminal (CLI), and that the commands are not intuitive, making the learning curve steep. The Cutter project was created to provide an easy-to-use, but still powerful, interface to radare2 for new users. This is done with a native graphical user interface made in Qt and C++. The goal of the talk is to present radare2 history, along with the common complaints from users, and how we try to overcome those with Cutter. I’ll be presenting the features that are already implemented, the way we allow our users to script the interface, and obviously the missing features that we will implement in a near future. While Cutter is still under heavy development, it’s becoming more and more user-friendly and easy to use. It is becoming a great alternative to other reverse engineering tools. </abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
	<person>Antide Petit (Cutter developer)</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

</room>

<room name="B001 : D'Arsonval">

<event guid="10" id="10">
<date>2018-07-02T14:15:00+02:00</date>
<start>14:15</start>
<duration>02:30</duration>
<room>B001 : D'Arsonval</room>
<recording>
<license>Creative Commons by SA</license>
<optout>false</optout>
</recording>
<title>WORKSHOP: Introduction to Bro Network Security Monitor</title>
<subtitle/>
<track>Workshop</track>
<type/>
<language/>
<abstract>
Bro is an open-source Network Security Monitor (NSM) and analytics platform. Even though it has been around since the mid 90’s, its main user base was primarily universities, research labs and supercomputing centers. In the past few years however, more and more security professionals in the industry turned their attention to this powerful tool, as it runs on commodity hardware, thus providing a low-cost alternative to commercial solutions.

At its core, Bro inspects traffic and creates an extensive set of well-structured, tab-separated log files that record a network’s activity. Nonetheless, Bro is a lot more than just a traditional signature-based IDS. While it supports such standard functionality as well, Bro’s scripting language allows security analysts to perform arbitrary analysis tasks such as extracting files from sessions, detecting malware by interfacing with an external source, detecting brute-forcing, etc. It comes with a large set of pre-built standard libraries, just like Python.

During this two-hour workshop, we will learn about Bro’s capabilities and cover the following topics:

    Introduction to Bro
    Bro architecture
    Bro events and logs
    Bro signatures
    Bro scripting
    Bro and ELK

Requirements for the workshop:

    A laptop with at least 8 GB of RAM and more than 30 GB of free disk space
    VMWare Workstation or VMWare Player installed
</abstract>
<description/>
<logo>https://2018.pass-the-salt.org/img/salt-512.png</logo>
<persons>
<person>Eva Szilagyi - CEO Alzette Information Security</person>
<person>David Szili - CTO Alzette Information Security</person>
</persons>
<links>
</links>
<attachments>
</attachments>
</event>

</room>

</day>
</schedule>